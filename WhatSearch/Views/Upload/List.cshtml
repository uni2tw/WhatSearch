@using WhatSearch.Controllers
@using WhatSearch.Utility
@{
    this.Layout = "_Layout.cshtml";
}

@section header {
    <style>
        progress {
            width: 100%;
            height: 3em;
            color: black;
            font-size: 1.5em;
            text-align: center;
            padding-top:.7em;
            font-weight:bold;
        }
        progress:before {
            content: attr(data-label);            
        }
        .table tbody tr {
            border-bottom: 1px dashed lightgrey;
        }
        .nav-menu {
            color: black;
            border: 1px solid darkgray;
            background-color: white !important;
            font-size: 2em;
            padding: 0.2em 0px;
            box-shadow: 3px 0px 5px;
        }
        .nav-menu-item {
            text-align: center;
            padding: .4em 1em;
        }
    </style>
}



<body>
    <div id="app">
        <div v-if="mode==0">
            <nav class="navbar navbar-dark bg-dark sticky-top">
                <div style="flex-grow:1;width:80%;display:flex;color: silver;">
                    <div style="display:flex; font-size:1.5rem; font-family: monospace">
                        上傳(最大@(ViewBag.LimitMb)MB) {{this.desc}}
                    </div>
                </div>
                <div style="width:36px; padding-left:2px">
                    <button type="button" v-on:click="openMenu()" class="btn btn-success btn">
                        <i class="fa fa-list"></i>
                    </button>
                </div>
            </nav>
            <div v-if="menuOn" class="nav-menu">
                <div v-on:click="go_public()" class="nav-menu-item">公開區</div>
                <div v-on:click="go_secret()" class="nav-menu-item">私人區</div>
                <div v-on:click="go_public_secret()" class="nav-menu-item">私人區(分享用)</div>
            </div>
            <div class="container-fluid" v-cloak>

                <div style="display:flex">
                    <input v-on:change="startUploadFile" id="picFile" type="file" ref="picFile" class="form-control-file"
                           multiple="multiple"
                           @*accept="*/*" *@
                           accept="application/msword,image/gif,image/jpeg,application/pdf,image/png,application/vnd.ms-excel,application/vnd.openxmlformats-officedocument.spreadsheetml.sheet,application/zip,.doc,.gif,.jpeg,.jpg,.pdf,.png,.xls,.xlsx,.zip"
                           style="padding:10px; font-size:2em" />
                    <button class="btn btn-primary" style="margin:5px">新增文字</button>
                </div>
                <div>
                    <progress :value="progress" :data-label="progressText"></progress>
                </div>
                <h1>列表(保存3天)</h1>
                <table class="table">
                    @foreach (WhatSearch.Controllers.UploadController.FileDownloadInfoModel fi in ViewBag.Items)
                    {
                        <tr>
                            <td style="font-size:1.5em; word-break:break-all">
                                @if (string.IsNullOrEmpty(ViewBag.Secret))
                                {
                                    <a href="/upload/file/@fi.Id">@fi.Title</a>
                                }
                                else
                                {
                                    <a href="/upload/@ViewBag.Secret/file/@fi.Id">@fi.Title</a>
                                }
                            </td>
                            <td>@fi.Size</td>
                            <td>@fi.Time</td>
                            <td>@fi.DeleteAfter</td>
                        </tr>
                    }
                </table>
            </div>
        </div>
        
        <div v-if="mode==1" style="position: relative;margin: 0px;padding: 0px;border: 1px solid red;">
            <button style="position: absolute;right: 0px;top: 0;">Save</button> 
            <div contenteditable="true" style="margin: 10px;padding: 10px;">You Favorite Movie</div>
        </div>
        
    </div>
    <script type="text/javascript">
        window.app = new Vue({
            el: '#app',
            watch: {
                chunks(n, o) {
                    if (n.length > 0) {
                        this.upload();
                    }
                }
            },
            data: {
                menuOn: false,
                secret: '@ViewBag.Secret',                
                file: null,
                uploaded: 0,
                fileUploaded:0,
                fileTotal:0,
                chunks: [],
                queuedFiles: [],
                mode: 0
            },
            computed: {
                progress() {
                    if (this.file == null) {
                        return '';
                    }
                    return this.uploaded / this.file.size;
                },
                progressText() {
                    if (this.file == null) {
                        return '';
                    }
                    var val = Math.ceil(this.uploaded * 100 / this.file.size);
                    if (val >= 100) {
                        return val.toString() + '% 完成' + ' - ' + this.fileUploaded + ' / ' + this.fileTotal;;
                    } else {
                        return val.toString() + '%' + ' - ' + this.fileUploaded + ' / ' + this.fileTotal;
                    }                    
                },
                apiStatusUrl() {
                    if (this.secret) {
                        return '/upload/' + this.secret + '/status';
                    } else {
                        return '/upload/status';
                    }
                },
                apiPostUrl() {
                    if (this.secret) {
                        return '/upload/' + this.secret + '/post';
                    } else {
                        return '/upload/post';
                    }
                },
                clientSecret() {                    
                    var secret = localStorage.getItem('secret');
                    return secret;
                },
                clientPublicSecret() {                    
                    var secret = localStorage.getItem('public_secret');
                    return secret;
                },
                desc() {
                    var result = " - 公開";
                    if (this.secret) {
                        if (this.secret.length == 6) {
                            result = " - 私有 - " + this.secret;
                        } else {
                            result = " - 私有";
                        }
                    }
                    return result;
                }
            },
            methods: {
                openMenu() {
                    this.menuOn = !this.menuOn;
                },
                go_public() {
                    location.href = '/upload';
                },

                go_secret() {
                    if (this.clientSecret) {
                        location.href = '/' + this.clientSecret + '/upload';
                    } else {
                        location.href = '/upload/secret';
                    }                    
                },
                go_public_secret() {
                    if (this.clientPublicSecret) {
                        location.href = '/' + this.clientPublicSecret + '/upload';
                    } else {
                        location.href = '/upload/public_secret';
                    }                    
                },

                reset() {
                    this.file = null;
                    this.uploaded = 0;
                    this.chunks = [];
                    document.getElementById('picFile').value = '';
                    this.fileTotal = 0;
                    this.fileUploaded = 0;
                    this.queuedFiles = [];
                },

                createChunks(uploaded) {
                    uploaded = uploaded || 0;
                    let size = 512 * 1024;
                    let chunks = Math.ceil((this.file.size - uploaded) / size);                    
                    for (let i = 0; i < chunks; i++) {
                        let start = uploaded + (i * size);
                        var chunk = this.file.slice(
                            start, Math.min(start + size, this.file.size), this.file.type
                        );
                        this.chunks.push(chunk);
                    }
                },

                startUploadFile() {
                    let files = this.$refs.picFile.files;
                    if (files.length > 0) {
                        this.fileTotal = files.length;
                        this.queuedFiles = this.$refs.picFile.files;
                        this.startUploadTheFile(files[0]);                        
                    }
                },

                startUploadTheFile(theFile) {
                    this.file = theFile;
                    let config = {
                        headers: {
                            'Content-Type': 'multipart/form-data'
                        }
                    }
                    let fd = new FormData;
                    fd.set('file_name', this.file.name);
                    axios.post(this.apiStatusUrl, fd, config).then(res => {
                        let data = res.data;
                        if (data.loc == 'temp') {
                            if (window.confirm(data.message)) {
                                this.uploaded = data.len;
                                this.createChunks(data.len);
                            } else {
                                this.reset();
                            }
                        } else if (data.loc == 'folder') {
                            if (window.confirm(data.message)) {
                                this.uploaded = 0;
                                this.createChunks();
                            }
                        } else {
                            this.uploaded = 0;
                            this.createChunks();
                        }                            
                    }).catch(err => {
                    });
                },


                upload: function () {

                    const self = this;

                    let config = {
                        headers: {
                            'Content-Type': 'multipart/form-data'
                        }
                    }
                    
                    let fd = new FormData;

                    fd.set('file_name', this.file.name);
                    fd.set('is_start', this.uploaded == 0 ? 'true' : 'false');
                    fd.set('is_end', this.chunks.length == 1 ? 'true' : 'false');
                    fd.set('file', this.chunks[0]);
                    
                    this.uploaded += this.chunks[0].size;

                    axios.post(this.apiPostUrl, fd, config).then(res => {
                        self.chunks.shift();
                        if (self.chunks.length == 0) {
                            self.fileUploaded++;
                            if (self.fileUploaded < self.fileTotal) {
                                //alert('upload next file?');
                                self.startUploadTheFile(self.queuedFiles[self.fileUploaded]);
                            } else {
                                window.setTimeout(function () {
                                    location.reload();
                                }, 1000);
                            }
                        }
                    }).catch(err => {
                        console.log(err.response);
                        alert(err.response.data);
                        self.reset();
                    }).then(res => {
                    });

                   
                }

            },
            beforeCreate: function () {

            },
            mounted: function () {
                if (this.secret != null && this.secret.length == 36) {
                    if (this.secret && this.clientSecret &&
                        this.secret != this.clientSecret) {
                        if (window.confirm('使用這個區域當做個人區域')) {
                            localStorage.setItem('secret', this.secret);
                        }
                    } else if (this.secret) {
                        localStorage.setItem('secret', this.secret);
                    }
                }
                if (this.secret != null && this.secret.length == 6) {
                    if (this.secret && this.clientPublicSecret &&
                        this.secret != this.clientPublicSecret) {
                        if (window.confirm('使用這個區域當做個人區域')) {
                            localStorage.setItem('public_secret', this.secret);
                        }
                    } else if (this.secret) {
                        localStorage.setItem('public_secret', this.secret);
                    }
                }
            }         
        });


    </script>
</body>