@using WhatSearch.Controllers
@using WhatSearch.Utility
@{
    this.Layout = "_Layout.cshtml";
}

@section header {
    <script
  src="https://code.jquery.com/jquery-3.5.1.slim.min.js"
  integrity="sha256-4+XzXVhsDmqanXGHaHvgh1gMQKX40OUvDEBTu8JcmNs="
  crossorigin="anonymous"></script>
    <style>
        progress {
            width: 100%;
            height: 3em;
            color: black;
            font-size: 1.5em;
            text-align: center;
            padding-top:.7em;
            font-weight:bold;
        }
        progress:before {
            content: attr(data-label);            
        }
        .table tbody tr {
            border-bottom: 1px dashed lightgrey;
        }
        .nav-menu {
            color: black;
            border: 1px solid darkgray;
            background-color: white !important;
            font-size: 2em;
            padding: 0.2em 0px;
            box-shadow: 3px 0px 5px;
        }
        .nav-menu-item {
            text-align: center;
            padding: .4em 1em;
        }
        #headPanel{
            display:flex; 
            font-size: 2rem;
            font-weight:bold;
            justify-content: space-between;
        }
        #infoPanel {
            border-top: 3px dashed #292d29;
            border-bottom: 3px dashed #292d29;
            min-height: 4rem;
            display:flex; 
            justify-content: space-between;
            font-size: 1.2rem;
            padding: 5px 3px;
        }
        #buttonsPanel {
            display: flex;
            justify-content: space-evenly;
            flex-direction: column;
            margin-right: 1em;
        }
        #btnResizeAndCrop {
            display: flex;
            justify-content: space-evenly;
            flex-direction: column;
            margin-right: 1em;
        }

        canvas {
            border: 3px solid lightgrey
        }

        canvas.selected {
            border: 3px solid black
        }
    </style>
}



<body>
    <div id="app">
        <div class="container-fluid">
            <div id="headPanel">
                <h1>Hello Merge images</h1>
                <a id="linkDownloadImage" href="">Download image</a>
            </div>
           
           <div id="infoPanel">
            <div></div>
            <div style="display:flex;">
                <div style="display:flex" id="buttonsPanel">
                    <button id="btnResizeAndCrop" class="form-control btn btn-success">Resize & Crop</button>
                </div>
                <div>
                    <div style="padding: 2px">
                    <label for="name" class="control-label">Max Width:</label>
                    </div>
                    <div style="padding: 2px">
                        <input type="number" id="txtMaxWidth" class="form-control" style="width: 240px">
                    </div>
                </div>
                <div>
                    <div style="padding: 2px">
                    <label for="name" class="control-label">Max Height:</label>
                    </div>
                    <div style="padding: 2px">
                        <input type="number" id="txtMaxHeight" class="form-control" style="width: 240px">
                    </div>
                </div>

            </div>
           </div>
           <div id="canvas-container" style="position:relative">
                <canvas id="canvasO" width="600" height="600"></canvas>
                <canvas id="canvasR" width="600" height="600"></canvas>
                <canvas id="canvasB" width="600" height="600"></canvas>
           </div>
        </div>
    </div>
    <script type="text/javascript">
        const _MATCH_SMALL_SIZE_CROP_CENTER = 1;
        window.settings = {};
        window.settings.cropMode = _MATCH_SMALL_SIZE_CROP_CENTER;
        window.settings.maxWidth = 400;
        window.settings.maxHeight = 400;

        $('#txtMaxWidth').val(window.settings.maxWidth);
        $('#txtMaxHeight').val(window.settings.maxHeight);

        var imgItems = [];

        var canvases = [];        
        
        const canvasO = document.getElementById('canvasO');
        const canvasR = document.getElementById('canvasR');
        const canvasB = document.getElementById('canvasB');
        $(canvasR).hide();
        $(canvasB).hide();

        canvases.push(canvasO);
        canvases.push(canvasR);
        canvases.push(canvasB);



        $( "#headPanel" ).on( "click", "#linkDownloadImage", function() {
            window.downloadImage();
            return false;
        });
        $( "#canvas-container" ).on( "click", "canvas", function() {
            $("#canvas-container").find('canvas').removeClass('selected');
            $(this).addClass('selected');
        });
        $('#txtMaxWidth, #txtMaxHeight').change(function(){
            window.settings.maxWidth = parseInt($('#txtMaxWidth').val(), 10);
            window.settings.maxHeight = parseInt($('#txtMaxHeight').val(), 10);
        });
        $('#btnResizeAndCrop').click(function() {

        });


        imgItems.push({
            "canvas": canvasO,
            "relCanvans": null,
            "isHorizontalLinked": null,
            "img": null,
            "imgWidth": 0,
            "imgHeight": 0,
        });

        imgItems.push({
            "canvas": canvasR,
            "relCanvans": null,
            "isHorizontalLinked": null,
            "img": null,
            "imgWidth": 0,
            "imgHeight": 0,
        });

        imgItems.push({
            "canvas": canvasB,
            "relCanvans": null,
            "isHorizontalLinked": null,
            "img": null,
            "imgWidth": 0,
            "imgHeight": 0,
        });

        window.createEmptyCanvas = function(relCanvas) {
            let container =  document.getElementById('canvas-container');

            var canvas = document.createElement('canvas');

            canvas.id = "CursorLayer";
            canvas.width = 30;
            canvas.height = 30;            
            canvasPanel.style.border = "3px solid black";

            container.appendChild(canvas);

            return canvas;
        }

        window.findImgItem = function(canvas) {
            for(var i in imgItems){
                imgItems[i].canvas = canvas;
                return imgItems[i];
            }
            return null;
        }

        window.refreshImgItem = function(canvas, w, h) {
            canvas.width = w;
            canvas.height = h;
            let img = window.findImgItem(canvas).img;
            if (img != null) {
                window.renderImage(canvas, img, false);
            }
        }

        window.renderImage = function(canvas, imgSrc, refreshOthers) {
            refreshOthers = refreshOthers || false;
            const ctx = canvas.getContext('2d');
            const img = new Image();
            img.onload = function() {
                console.log('img loaded ' + this.width + 'x' + this.height);
                if (this.width >= this.height && this.width > window.settings.maxWidth) {
                    var x = (this.width - this.height) / 2;
                    var y = 0;
                    var w = this.height;
                    var h = this.height;                

                } else if (this.height >= this.width && this.height > window.settings.maxHeight) { 
                    var x = (this.height - this.width) / 2;
                    var y = 0;
                    var w = this.width;
                    var h = this.width;                    
                } else {
                    var x = 0;
                    var y = 0;
                    var w = this.width;
                    var h = this.height;
                }
                canvas.width = w;
                canvas.height = h;
                window.findImgItem(canvas).img = img;
                window.findImgItem(canvas).imgWidth = this.width;
                window.findImgItem(canvas).imgHeight = this.height;
                ctx.drawImage(img, x, y, w, h, 0, 0, w, h);
            
                // image ready, show right/bottom canvas
                $(canvasR).show();
                $(canvasB).show();
            }
            img.crossorigin="anonymous";
            img.src = imgSrc;
        }
        $('canvas').eq(0).addClass('selected');
        if ($('canvas.selected').length > 0) {
            let canvas = $('canvas.selected')[0];
@*            window.renderImage(
                canvas,
                'https://bnextmedia.s3.hicloud.net.tw/image/album/2020-10/img-1603878317-54542.jpg', true);*@
        }

        window.downloadImage = function() {

            var srcCanvas = $('canvas.selected')[0];

            var destCanvas = document.createElement('canvas');

            destCanvas.id = "CursorLayer";
            destCanvas.width = 1224;
            destCanvas.height = 768;
            destCanvas.style.zIndex = 8;
            destCanvas.style.position = "absolute";
            destCanvas.style.border = "1px solid";

            var body = document.getElementsByTagName("body")[0];
            body.appendChild(destCanvas);

            var destCtx = destCanvas.getContext("2d");           
            destCtx.drawImage(srcCanvas, 0, 0);

            let canvasImage = destCanvas.toDataURL("image/png").replace("image/png", "image/octet-stream");
            body.removeChild(destCanvas);

            let xhr = new XMLHttpRequest();
            xhr.responseType = 'blob';
            xhr.onload = function () {
                let a = document.createElement('a');
                //let a = document.getElementById('linkDownloadImage');
                a.href = window.URL.createObjectURL(xhr.response);
                a.download = 'download.png';
                a.style.display = 'none';
                document.body.appendChild(a);
                a.click();
                a.remove()
              };
            xhr.open('GET', canvasImage); // This is to download the canvas Image
            xhr.send();
        }

        window.copyCanvas = function(sourceCanvas, destinationCanvas) {            
            sourceCanvas = canvases[0];
            destinationCanvas = canvases[1];
            var destCtx = destinationCanvas.getContext('2d');
            destCtx.drawImage(sourceCanvas, 0, 0);
        }
        document.onpaste = function(event){
          var items = (event.clipboardData || event.originalEvent.clipboardData).items;
          console.log(JSON.stringify(items)); // will give you the mime types
          for (index in items) {
            var item = items[index];
            if (item.kind === 'file') {
                var blob = item.getAsFile();
                var reader = new FileReader();
                reader.onload = function(event){
                    if ($('canvas.selected').length > 0) {
                        let canvas = $('canvas.selected')[0];
                        window.renderImage(canvas, event.target.result, true);
                        console.log(event.target.result)
                    }
                }; // data url!
                reader.readAsDataURL(blob);
            }
          }
        }

    </script>
</body>