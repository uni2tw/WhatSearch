@using WhatSearch.Controllers
@using WhatSearch.Utility
@{ 
    this.Layout = "_Layout.cshtml";
}

@section header {     

    <style type="text/css">

        #searchResult tr {
            cursor: pointer;
        }

        table {
            height: 100%;
        }

        .cell {
            background: #ddd;
            border: 5px solid #fff;
        }
        /* Optional */


        .stackem div {
            width: 100%;
        }

        .selected-item-row {
            border-left:6px solid forestgreen;
        }
        .top-mark, .bottom-mark {
            color:transparent;
        }

    </style>

    <script type="text/javascript">
        
        window.getFolder = function (folder, pushState) {
            api.folder(folder).then(function (res) {
                var data = res.data;
                if (history.state != null) {
                    console.log('url from:' + history.state.url);
                }
                console.log('url to:' + data.url);

                if (pushState) {
                    let state = { 'folder': folder };
                    console.log('push-state:' + folder);
                    window.history.pushState(state, '', data.url);
                }
                
                app.vm_renderItems(data);
                
                api.breadcrumbs(folder).then(res => {
                    console.log('bradcrums: ' + JSON.stringify(res.data));
                    app.breadcrumbs = res.data;
                });

            });               
        }



    </script>
}

@section footer {     

    <style type="text/css">
        #breadcrumbs {
            display: flex;
            white-space: nowrap;
            overflow-x: auto;
            font-size: 13px;
        }

        #breadcrumbs .item {
            display:flex;
        }

        #breadcrumbs a {
            display:flex;
            color: cornsilk;
        }

        #breadcrumbs .sep {
            display:flex;
            padding-left: 3px;
            padding-right: 3px;
            color: cornsilk;
            font-size: 13px;
        }
    </style>

    <script type="text/javascript">

        Vue.component('search-component', {
          template: `
            <div style="position:relative; flex-grow: 1">
                <input type="text" ref="myText"
                    v-on:keyup.enter="doSearch" 
                    v-on:keyup="updateValue($event.target.value)" 
                    v-on:click="$event.target.select()"
                    placeholder="什麼" class="form-control search-component-input" />
                <button v-on:click="doSearch" class="btn btn-success"
                        style="position:absolute; right:0px; top:0px">
                    <i class="fa fa-search"></i>
                </button>
            </div>
            `,
          data: function () {
            return {
               
            }
          },
          props: ['keyword'],
          methods: {
            doSearch: function() {
                console.log('begin search, data:' + JSON.stringify({ 'q': this.keyword }));
                if(!this.keyword) {
                    alert('請輸入');
                    return;
                }
                api.search(this.keyword).then(function (res) {
                    var data = res.data;
                    $('#searchResult>tbody').empty();
                    app.items = data.items;
                    $('p', 'footer').text(data.message);
                });
            },
            updateValue: function(val) {
                this.keyword = val;
            }
          },
          mounted: function() {
          }
        });

        Vue.component('breadcrumbs-component', {
          template: `
            <div id="breadcrumbs" style="align-self:center">
                <template v-for="item in items">                    
                    <a class="nav-link" v-on:click="itemClick(item)" href="javascript:void(0)">{{ item.text }}</a><span class="sep">&gt;</span>                                       
                </template>
            </div>
            `,
          data: function () {
            return {
            }
          },
          props: ['items'],
          methods: {
            itemClick: function(item) {
                if (item.id != null) {
                    window.getFolder(item.id, true);
                }
            }
          }
        });


        window.app = new Vue({
            el: '#main',
            data: {
                breadcrumbIsVisible: true, 
                breadcrumbs: [],
                items: [],
                searchIsVisible: false
            },
            created: function() {
                window.onpopstate = function () {
                    if (event.state) {
                        let itemId = event.state.folder;                
                        window.getFolder(itemId, false);
                    }
                };
            },
            mounted: function() {
                window.addEventListener("keydown", this.handleKeyDownEvent);
                let pathname = window.location.pathname;
                api.pathId(pathname).then(res=>{
                    console.log('pathid:' + res.data.pathId);
                    window.getFolder(res.data.pathId, true);
                }).catch(err=> {
                    console.log('error response from api.pathId with ' + err.response.data);
                });
                
            },
            destroyed() {
                window.removeEventListener("keydown", this.handleKeyDownEvent);
            },
            methods: {
                toggleBarMode: function() {
                    if (app.searchIsVisible == false) {
                        app.searchIsVisible = true;
                        app.breadcrumbIsVisible = false;
                        window.setTimeout(function() {
                            $('.search-component-input').empty().focus();
                        }, 50);                    
                    } else {
                        app.searchIsVisible = false;
                        app.breadcrumbIsVisible = true;
                    }
                },
                vm_changeFolder: function (item) {
                    if (item.type == 'folder') {
                        api.folder(item.id).then(function (res) {
                            var data = res.data;                                
                            console.log('push-state:' + item.id);                            
                            let state = { 'folder': item.id };
                            window.history.pushState(state, '', data.url);
                            app.vm_renderItems(data);
                        });

                        api.breadcrumbs(item.id).then(res => {
                            this.breadcrumbs = res.data;
                        });
                    } else {
                        console.log('open file:' + item.get_url)
                        window.open(item.get_url, '_blank');
                    }
                },
                vm_renderItems: function (res) {
                    const items = res.items;
                    const message = res.message;
                    $('#searchResult>tbody').empty();
                    app.items = items;

                    $('p', 'footer').text(message);
                    app.searchIsVisible = false;
                    app.breadcrumbIsVisible = true;
            
                    window.setTimeout(function () {
                        app.adjustScrollTop();
                    },50);            
                },
                handleKeyDownEvent: function (evt) {
                    if (evt.keyCode == 40) {
                        let selectedIndex = -1;
                        for (i in this.items) {
                            let item = this.items[i];
                            if (item.selected) {
                                selectedIndex = parseInt(i, 10);
                                break;
                            }                                
                        }
                        let nextIndex = 0;
                        if (selectedIndex != -1) {                                
                            nextIndex = selectedIndex + 1;
                        }
                        console.log('key 40 debug:' +
                            selectedIndex + '/' + nextIndex + '/' + this.items.length);
                        if (nextIndex == this.items.length) {
                            return;
                        }
                        if (selectedIndex != -1) {
                            this.items[selectedIndex].selected = false;
                        }
                        this.items[nextIndex].selected = true;
                        this.$forceUpdate();
                        window.event.preventDefault();
                    }
                    if (evt.keyCode == 38) {
                        let selectedIndex = -1;
                        for (i in this.items) {
                            let item = this.items[i];
                            if (item.selected) {
                                selectedIndex = parseInt(i, 10);
                                break;
                            }                                
                        }
                        let nextIndex = 0;
                        if (selectedIndex != -1) {                                
                            nextIndex = selectedIndex - 1;
                        }                            
                        if (nextIndex == -1) {
                            return;
                        }
                        if (selectedIndex != -1) {
                            this.items[selectedIndex].selected = false;
                        }
                        this.items[nextIndex].selected = true;
                        this.$forceUpdate();
                        window.event.preventDefault();
                    }
                    if (evt.keyCode == 37) {
                        history.back();
                    }
                    if (evt.keyCode == 13 || evt.keyCode == 39) {
                        if ($('.selected-item-row').length > 0) {
                            $('.selected-item-row')[0].click();
                        }
                    }

                    this.adjustScrollTop();
                        
                },
                setSelectedItem: function (itemId) {
                    console.log('set selected: ' + itemId);
                    this.items.forEach(t => {
                        t.selected = false;
                    });
                    let selectedItem = this.items.find(t => {
                        return t.id == itemId
                    });
                    if (selectedItem != null) {
                        selectedItem.selected = true;
                        if (selectedItem.type != 'folder') {
                            this.$forceUpdate();
                        }
                    }
                },
                adjustScrollTop: function () {
                    this.$nextTick(function () {
                        //check selected-row at view
                        if ($('.selected-item-row').length > 0) {
                            if ($('.selected-item-row').offset().top + $('.selected-item-row').height() >
                                $('.bottom-mark').offset().top) {                                    
                                document.documentElement.scrollTop += 50;
                            }
                            if ($('.selected-item-row').offset().top < $('.top-mark').offset().top) {
                                if (document.documentElement.scrollTop >= 50) {
                                    document.documentElement.scrollTop -= 50;
                                }
                            }
                        }
                    });
                },
                vm_itemOver: function (itemId) {
                    console.log('over: ' + itemId);                        
                    app.setSelectedItem(itemId);
                        
                }
            }
        })
    </script>

}

<body>

    <div id="main" v-cloak>

    <nav class="navbar navbar-dark bg-dark sticky-top">
        <div style="flex-grow:1; width:80%; display:flex">
            <span class="navbar-brand mb-0 h1">WhatSearch</span>
            <breadcrumbs-component :items="breadcrumbs" v-if="breadcrumbIsVisible"></breadcrumbs-component>    
            <search-component v-if="searchIsVisible"></search-component>
        </div>
        <div style="width:36px; padding-left:2px">
            <button v-on:click="toggleBarMode()" class="btn btn-success"><i class="fa fa-bars"></i></button>
        </div>
    </nav>
    
    <div class="container-fluid" >
        <div v-for="(item, index) in items" v-on:click="vm_itemOver(item.id); vm_changeFolder(item)"
                :class="{'row': true,'item-row': true, 'selected-item-row': item.selected}" 
                style="padding:5px 5px 5px 5px; width:100%; cursor:pointer"
                >
            <div style="height:40px;  padding-left: 20px;" class="">
                <i v-if="item.type == 'folder'" class="fa fa-folder-open pull-left"
                    style="font-size:32px;color:orange;"></i>
                <i v-else-if="item.type == 'video'" class="fa fa-file-video-o pull-left"
                    style="font-size:32px;color:silver;"></i>
                <i v-else-if="item.type == 'music'" class="fa fa-file-audio-o pull-left"
                    style="font-size:32px;color:silver;"></i>
                <i v-else-if="item.type == 'image'" class="fa fa-file-photo-o pull-left"
                    style="font-size:32px;color:silver;"></i>
                <i v-else-if="item.type == 'text'" class="fa fa-file-text-o pull-left"
                    style="font-size:32px;color:silver;"></i>
                <i v-else class="fa fa-folder-file pull-left"
                    style="font-size:32px;color:silver;"></i>
            </div>
            <div style="flex-grow:2; width:80%">
                <div style="display:flex; flex-direction:column">
                    <div style="font-size: 18px; line-height:20px;overflow:auto; white-space:nowrap">{{ item.title }}</div>
                    <div style="font-size: 12px;line-height:12px; color:gray; display:flex; flex-direction:row; justify-content:space-between">
                        <div style="padding-left:0px; width:50%; ">{{ item.modify }}</div>
                        <div style="width:40%; text-align:right">{{ item.size }}</div>
                    </div>
                </div>
            </div>
        </div>
        <footer>
            <p style="text-align:right"></p>
        </footer>
    </div>





    <div class="top-mark" style="position:fixed; top:50px">***</div>
    <div class="bottom-mark" style="position:fixed; bottom:0px">***</div>
    <!-- Bootstrap core JavaScript
================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->

    </div>



</body>