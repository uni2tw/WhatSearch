@using WhatSearch.Controllers
@using WhatSearch.Utilities
@{ 
    this.Layout = "_Layout.cshtml";
}

<style type="text/css">

    table {
        height: 100%;
    }

    .cell {
        background: #ddd;
        border: 5px solid #fff;
    }
    /* Optional */


    .stackem div {
        width: 100%;
    }

    .selected-item-row {
        border-left:6px solid forestgreen;
    }
    .top-mark, .bottom-mark {
        color:transparent;
    }


    .my-tabs {
        display: flex;
        padding: 0px;
        margin: 3px 2px;
    }
    .my-tab {
        list-style-type: none;
        margin: 0px 0.25rem;
        padding: 0px;
        width:25%;
    }
    .new-tab {
        list-style-type: none;
        margin: 0px 0.25rem;
        padding: 0px;
        flex-shrink: 0;
        width:fit-content;
    }
    .tabs-nav{
        position: sticky;
        top: 46px;
        z-index: 1021;
        background-color: white;
        margin: 0px;        
        padding-top: 1px;
    }
    .tabs-nav {

    }
</style>

<body>

<div id="app" v-cloak>

    <nav class="navbar navbar-dark bg-dark sticky-top">
        <div style="flex-grow:1; width:80%; display:flex">
            @*<button class="btn btn-success"><i class="fa-solid fa-house"></i></button>*@
            <span class="navbar-brand mb-0 h1">WhatSearch</span>
            <breadcrumbs-component :items="breadcrumbs" v-show="barMode=='breadcrumb'"
                v-on:select-breadcrumb="vm_getFolder"></breadcrumbs-component>    
            <search-component v-show="barMode=='search'" v-model="keyword" v-on:change="showKeyword()" 
                v-on:get-result="getSearchResult"></search-component>
        </div>
        <div style="width:36px; padding-left:2px">
            <button v-on:click="toggleBarMode()" class="btn btn-success"><i class="fa fa-bars"></i></button>
        </div>
    </nav>

    <div class="tabs-nav">
        <ul class="my-tabs">
            <li class="my-tab" v-for="(tab, idx) in tabs">
                <button class="btn w-100 text-nowrap" 
                v-bind:class="{'btn-primary': idx == activedTabIndex, 'btn-outline-secondary': idx != activedTabIndex}"
                v-on:click="switchTab(idx)"
                v-on:dblclick="removeTab(idx)"
                >{{tab.name}}</button></li>
            <li class="new-tab" v-show="tabs.length<4"><button class="btn btn-outline-primary w-100" v-on:click="newTab">+</button></li>
        </ul>
    </div>    

    <div class="container-fluid tabs-container">            
        <div  v-for="(tab,idx) in tabs" class="tab-content" v-show="idx == activedTabIndex">
            <div v-for="(item, index) in tab.items" v-on:click="vm_itemOver(item.id); vm_changeFolder(item)"
                    :class="{'row': true,'item-row': true, 'selected-item-row': item.selected}" 
                    style="padding:5px 5px 5px 5px; width:100%; cursor:pointer"
                    >
                <a :name="item.id"></a>
                <div style="height:40px;  padding-left: 20px;" class="">
                    <i v-if="item.type == 'folder'" class="fa fa-folder-open pull-left"
                        style="font-size:32px;color:orange;"></i>
                    <i v-else-if="item.type == 'video'" class="fa fa-file-video-o pull-left"
                        style="font-size:32px;color:silver;"></i>
                    <i v-else-if="item.type == 'music'" class="fa fa-file-audio-o pull-left audio-icon" :class="{'audio-playing': item.playing}"></i>
                    <i v-else-if="item.type == 'image'" class="fa fa-file-photo-o pull-left"
                        style="font-size:32px;color:silver;"></i>
                    <i v-else-if="item.type == 'text'" class="fa fa-file-text-o pull-left"
                        style="font-size:32px;color:silver;"></i>
                    <i v-else class="fa fa-file-text-o pull-left"
                        style="font-size:32px;color:silver;"></i>
                </div>
                <div style="flex-grow:2; width:70%">
                    <div style="display:flex; flex-direction:column">
                        <div style="font-size: 18px; line-height:20px;overflow:auto; white-space:nowrap">{{ item.title }}</div>
                        <div style="font-size: 12px;line-height:12px; color:gray; display:flex; flex-direction:row; justify-content:space-between">
                            <div style="padding-left:0px; width:50%; ">{{ item.modify }}</div>
                            <div style="width:40%; text-align:right">{{ item.size }}</div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="footer d-flex">
                <div class="w-50"></div>
                <div class="w-50" style="text-align:right; padding:0px 0.5rem 0.25rem 0px">{{tab.message}}</div>
            </div>
        </div>
    </div>

    <div class="top-mark" style="position:fixed; top:50px">***</div>
    <div class="bottom-mark" style="position:fixed; bottom:0px">***</div>
    <!-- Bootstrap core JavaScript
================================================== -->
    <!-- Placed at the end of the document so the pages load faster -->

    </div>


   <style type="text/css">
        #breadcrumbs {
            display: flex;
            white-space: nowrap;
            overflow-x: auto;
            font-size: 13px;
        }

        #breadcrumbs .item {
            display:flex;
        }

        #breadcrumbs a {
            display:flex;
            color: cornsilk;
        }

        #breadcrumbs .sep {
            display:flex;
            padding-left: 3px;
            padding-right: 3px;
            color: cornsilk;
            font-size: 13px;
        }

        .audio-icon {
            font-size:32px;color:silver;
        }

        .audio-playing {
            font-size:32px;color:black;
        }

        .tab-content {
          box-shadow: 0 4px 8px 0 rgba(0,0,0,0.2);
          transition: 0.3s;
          border-radius: 5px; /* 5px rounded corners */
        }

    </style>

    <script type="text/html" id="fileViewTemplate">
        <div v-for="(item, index) in tab.items" v-on:click="vm_itemOver(item.id); vm_changeFolder(item)"
                :class="{'row': true,'item-row': true, 'selected-item-row': item.selected}" 
                style="padding:5px 5px 5px 5px; width:100%; cursor:pointer"
                >
            <a :name="item.id"></a>
            <div style="height:40px;  padding-left: 20px;" class="">
                <i v-if="item.type == 'folder'" class="fa fa-folder-open pull-left"
                    style="font-size:32px;color:orange;"></i>
                <i v-else-if="item.type == 'video'" class="fa fa-file-video-o pull-left"
                    style="font-size:32px;color:silver;"></i>
                <i v-else-if="item.type == 'music'" class="fa fa-file-audio-o pull-left audio-icon" :class="{'audio-playing': item.playing}"></i>
                <i v-else-if="item.type == 'image'" class="fa fa-file-photo-o pull-left"
                    style="font-size:32px;color:silver;"></i>
                <i v-else-if="item.type == 'text'" class="fa fa-file-text-o pull-left"
                    style="font-size:32px;color:silver;"></i>
                <i v-else class="fa fa-file-text-o pull-left"
                    style="font-size:32px;color:silver;"></i>
            </div>
            <div style="flex-grow:2; width:70%">
                <div style="display:flex; flex-direction:column">
                    <div style="font-size: 18px; line-height:20px;overflow:auto; white-space:nowrap">{{ item.title }}</div>
                    <div style="font-size: 12px;line-height:12px; color:gray; display:flex; flex-direction:row; justify-content:space-between">
                        <div style="padding-left:0px; width:50%; ">{{ item.modify }}</div>
                        <div style="width:40%; text-align:right">{{ item.size }}</div>
                    </div>
                </div>
            </div>
        </div>
        <div class="footer d-flex">
            <div class="w-50"></div>
            <div class="w-50" style="text-align:right; padding:0px 0.5rem 0.25rem 0px">{{tab.message}}</div>
        </div>
    </script>


    <script src="/assets/js/vue3-touch-events.js"></script>
    <script type="text/javascript">      

        const App = {
            data() {
                return {
                    /* 
                    tabs: 
                        id,
                        name,
                        type:files/serach/favorite，預設應該是files
                        items:[],
                        message: '',
                        breadcrumns: '',
                        barMode: '', //search,breadcrumb
                        keyword: '',
                        path:'',
                        pages:[
                            {
                                type: 'files',
                                keyword: '',
                                path: '',
                                items: []
                            }
                        ]                        
                    */
                    tabs: [],
                    activedTabIndex: 0,
                    breadcrumbs: [],
                    items: [],
                    barMode: 'breadcrumb',
                    keyword: '',
                    footerMessage: ''
                }
            },
            created: function() {
                let self = this;
                window.onpopstate = function () {                    
                    if (event.state) {
                        let itemId = event.state.folder;                
                        self.vm_getFolder(itemId, false);
                    }
                };
            },
            mounted: function() {
                window.addEventListener("keydown", this.handleKeyDownEvent);                
                this.getStarterFolder();
                this.tabs.push({id: 1, name: 'Default', items:[]});
            },
            destroyed() {
                window.removeEventListener("keydown", this.handleKeyDownEvent);
            },
            methods: {
                getStarterFolder(pathname) {
                    if (pathname == null || pathname == undefined) {
                        pathname = window.location.pathname;
                    }
                    api.pathId(pathname).then(res=>{
                        console.log('pathid:' + res.data.pathId);                    
                        this.vm_getFolder(res.data.pathId, true);
                    }).catch(err=> {
                        console.log('error response from api.pathId with ', err.response);
                    });
                },
                toggleBarMode: function() {
                    const theTab = this.tabs[this.activedTabIndex];
                    if (this.barMode == 'breadcrumb') {
                        this.barMode = 'search';
                        theTab.barMode = 'search';
                        window.setTimeout(function() {
                            $('.search-component-input').empty().focus();
                        }, 50);                    
                    } else {
                        this.barMode = 'breadcrumb';
                        theTab.barMode = 'breadcrumb';
                    }
                },
                vm_getFolder: function (folder, pushState) {
                    api.folder(folder).then((res) => {
                        var data = res.data;
                        if (history.state != null) {
                            console.log('url from:' + history.state.url);
                        }
                        console.log('url to:' + data.url);

                        if (pushState) {
                            let state = { 'folder': folder };
                            console.log('push-state:' + folder);
                            window.history.pushState(state, '', data.url);
                        }
                        //回到上頁時，記住上次選到哪
                        let lastFolder = window.localStorage.getItem('lastFolder');                        
                        this.vm_renderItems(data, 'files', folder, '');
                        window.localStorage.setItem('lastFolder', folder); 
                        if (lastFolder) {
                            let lastFolderFoundIndex = -1;
                            let lastFolderFoundItem = -1;
                            for(var i in data.items) {
                                let item = data.items[i];                                
                                if (item.id == lastFolder) {
                                    lastFolderFoundIndex = i;
                                    lastFolderFoundItem = item;
                                    break;
                                }
                            }
                            if (lastFolderFoundIndex != -1) {
                                lastFolderFoundItem.selected = true;
                                Vue.set(data.items, lastFolderFoundIndex, lastFolderFoundItem);
                            }
                        }
                    })
                },
                vm_changeFolder: function (item) {
                    if (item.type == 'folder') {
                        this.vm_getFolder(item.id, true);
                    } else {                        
                        if (item.type == 'music') {
                            console.log('play music:' + item.get_url);
                            //window.open(item.get_url, '_blank');
                            this.vm_playMusic(item.get_url, item.id);
                        } else {
                            console.log('open file:' + item.get_url);
                            window.open(item.get_url, '_blank');
                        }
                    }
                },
                vm_renderItems: function (res, type, path, keyword) {
                    const items = res.items;
                    const message = res.message;
                    const breadcrumbs = res.breadcrumbs;                    

                    this.footerMessage = message;                                        
                    this.barMode = 'breadcrumb';

                    const theTab = this.tabs[this.activedTabIndex];
                    theTab.items = items;
                    theTab.breadcrumbs = breadcrumbs;
                    theTab.barMode = 'breadcrumb';
                    theTab.type = type;
                    theTab.keyword = '';
                    theTab.path = path;
                    theTab.message = message;
                    console.log('theTab', theTab);

                    this.breadcrumbs = theTab.breadcrumbs;
            
                    let self = this;
                    window.setTimeout(function () {
                        self.adjustScrollTop();
                    },50);            
                },
                vm_playMusic: function(audioURL, id) {
                    if (window.audio == null) {
                        window.audio = new Audio();                        
                        window.audioAutoNext = true;
                        window.audioAutoLoop = false;
                        window.audio.addEventListener('ended', t=> {
                            console.log('play paused.');
                            for(i in this.items) {
                                let item = this.items[i];
                                if (item.playing) {
                                    item.playing = false;
                                    Vue.set(this.items, i, item);
                                    let idx = this.items.indexOf(item);
                                    let nitem;
                                    for(nidx = idx+1; nidx<this.items.length; nidx++) {
                                        if (this.items[nidx].type=='music') {
                                            nitem = this.items[nidx];
                                            break;
                                        }
                                    }
                                    if (nitem) {
                                        console.log('play next');
                                        app.vm_playMusic(nitem.get_url, nitem.id);
                                        break;
                                    } else {
                                        console.log('no next song');
                                    }
                                } else {
                                    item.playing = false;
                                    Vue.set(this.items, i, item);
                                }                                
                            }
                        });                        
                    } else {
                        if (window.audio.paused == false) {
                            let currentSongClickAgain = false;
                            console.log('music pause.');
                            for(i in this.items) {
                                let item = this.items[i];                                
                                
                                if (item.playing && item.id == id)  {
                                    item.playing = false;
                                    Vue.set(this.items, i, item);
                                    currentSongClickAgain = true;
                                    break;
                                } else {
                                    item.playing = false;
                                    Vue.set(this.items, i, item);
                                }                                
                            }
                            if (currentSongClickAgain) {
                                window.audio.pause();
                            }                            
                        }
                    }

                    try {
                        window.audio.src = audioURL;                    
                        var playPromise = window.audio.play();
                        if (playPromise !== undefined) {
                        playPromise.then(function() {
                            // Automatic playback started!
                        }).catch(function(e) {
                            window.open(audioURL, '_blank');
                            return;
                        });
                        }
                    } catch {
                        alert('not allow. safari');
                        return;
                    }

                    for(i in this.items) {
                        let item = this.items[i];
                        if (item.id == id) {                            
                            item.playing = true;
                        }
                    }

                    console.log('play');
                },
                handleKeyDownEvent: function (evt) {
                    if (evt.keyCode == 40) {
                        let selectedIndex = -1;
                        for (i in this.items) {
                            let item = this.items[i];
                            if (item.selected) {
                                selectedIndex = parseInt(i, 10);
                                break;
                            }                                
                        }
                        let nextIndex = 0;
                        if (selectedIndex != -1) {                                
                            nextIndex = selectedIndex + 1;
                        }
                        console.log('key 40 debug:' +
                            selectedIndex + '/' + nextIndex + '/' + this.items.length);
                        if (nextIndex == this.items.length) {
                            return;
                        }
                        if (selectedIndex != -1) {
                            this.items[selectedIndex].selected = false;
                        }
                        this.items[nextIndex].selected = true;
                        this.$forceUpdate();
                        window.event.preventDefault();
                    }
                    if (evt.keyCode == 38) {
                        let selectedIndex = -1;
                        for (i in this.items) {
                            let item = this.items[i];
                            if (item.selected) {
                                selectedIndex = parseInt(i, 10);
                                break;
                            }                                
                        }
                        let nextIndex = 0;
                        if (selectedIndex != -1) {                                
                            nextIndex = selectedIndex - 1;
                        }                            
                        if (nextIndex == -1) {
                            return;
                        }
                        if (selectedIndex != -1) {
                            this.items[selectedIndex].selected = false;
                        }
                        this.items[nextIndex].selected = true;
                        this.$forceUpdate();
                        window.event.preventDefault();
                    }
                    //console.log('keycode:' + evt.keyCode);
                    if (evt.keyCode == 37) {
                        history.back();
                    }
                    if (evt.keyCode == 13 || evt.keyCode == 39) {
                        if ($('.selected-item-row').length > 0) {
                            $('.selected-item-row')[0].click();
                        }
                    }

                    this.adjustScrollTop();
                        
                },
                setSelectedItem: function (itemId) {
                    console.log('set selected: ' + itemId);
                    this.items.forEach(t => {
                        t.selected = false;
                    });
                    let selectedItem = this.items.find(t => {
                        return t.id == itemId
                    });
                    if (selectedItem != null) {
                        selectedItem.selected = true;
                        if (selectedItem.type != 'folder') {
                            this.$forceUpdate();
                        }
                    }
                },
                adjustScrollTop: function () {
                    this.$nextTick(function () {
                        //check selected-row at view
                        if ($('.selected-item-row').length > 0) {
                            if ($('.selected-item-row').offset().top + $('.selected-item-row').height() >
                                $('.bottom-mark').offset().top) {                                    
                                document.documentElement.scrollTop += 50;
                            }
                            if ($('.selected-item-row').offset().top < $('.top-mark').offset().top) {
                                if (document.documentElement.scrollTop >= 50) {
                                    document.documentElement.scrollTop -= 50;
                                }
                            }
                        }
                    });
                },
                vm_itemOver: function (itemId) {
                    console.log('over: ' + itemId);                        
                    this.setSelectedItem(itemId);
                        
                },
                showKeyword() {
                    console.log('k=>' + this.keyword);
                },
                getSearchResult(keyword, items, message) {                                      

                    this.items = items;
                    this.footerMessage = message;
                    const params=new URLSearchParams(location.search);
                    params.set('search',keyword);
                    window.history.pushState({},'',`${location.pathname}?${params.toString()}`);

                },
                newTab() {
                    console.log('newTab');
                    let newId = Math.max(...app._context.app._instance.data.tabs.map(x=>x.id))+1;                    
                    let newName = 'Default';
                    if (newId > 1) {
                        newName += ' ' + newId;
                    }
                    this.tabs.push({id: newId, name: newName, items:[], type: 'files'});
                    this.activedTabIndex = this.tabs.length - 1;
                    this.barMode = 'breadcrumb';
                    this.getStarterFolder("");
                },
                switchTab(idx) {
                    const theTab = this.tabs[idx];
                    this.activedTabIndex = idx;
                    this.breadcrumbs = theTab.breadcrumbs;
                    this.keyword = theTab.keyword;
                    this.barMode = theTab.barMode;
                },
                removeTab(idx) {
                    if (idx == 0) {
                        console.log("default tab can't remove.");
                        return;
                    }
                    console.log('removeTab ' + idx + ' done');
                    this.tabs.splice(idx, 1);
                    this.activedTabIndex = idx - 1;
                }
            }
        };

        app = Vue.createApp(App);

        vueTouchEvents.install(app);

        app.component('search-component', {
          template: `
            <div style="position:relative; flex-grow: 1">
                <input type="text" ref="myText"
                    v-on:keyup.enter="doSearch" 
                    v-on:keyup="updateValue($event.target.value)" 
                    v-on:click="$event.target.select()"
                    placeholder="什麼" class="form-control search-component-input" />
                <button v-on:click="doSearch" class="btn btn-success"
                        style="position:absolute; right:0px; top:0px">
                    <i class="fa fa-search"></i>
                </button>
            </div>
            `,
          data() {
            return {
               keyword: ''
            }
          },
          props: [],
          
          methods: {
            doSearch: function() {
                console.log('begin search, data:' + JSON.stringify({ 'q': this.keyword }));
                if(!this.keyword) {
                    alert('請輸入');
                    return;
                }
                api.search(this.keyword).then((res) => {
                    var data = res.data;
                    this.$emit('get-result', this.keyword, data.items, data.message);
                });
            },
            updateValue: function(val) {
                this.keyword = val;
                this.$emit('update:modelValue', val);
            }
          },
          mounted: function() {
          }
        });

        app.component('breadcrumbs-component', {
          template: `
            <div id="breadcrumbs" style="align-self:center">
                <template v-for="item in items">                    
                    <a class="nav-link" v-on:click="itemClick(item)" href="javascript:void(0)">
                        {{ item.text }}</a><span class="sep">&gt;</span>
                </template>
            </div>
            `,
          data: function () {
            return {
            }
          },
          props: ['items'],
          methods: {
            itemClick: function(item) {
                if (item.id != null) {
                    //
                    this.$emit('select-breadcrumb', item.id, true);                    
                }
            }
          }
        });

        app.component('file-view', {
            template: '#fileViewTemplate'  
        });

        app.mount('#app');

    </script>

</body>
